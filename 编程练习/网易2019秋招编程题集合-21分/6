/*
小易有一些立方体，每个立方体的边长为1，他用这些立方体搭了一些塔。
现在小易定义：这些塔的不稳定值为它们之中最高的塔与最低的塔的高度差。
小易想让这些塔尽量稳定，所以他进行了如下操作：每次从某座塔上取下一块立方体，并把它放到另一座塔上。
注意，小易不会把立方体放到它原本的那座塔上，因为他认为这样毫无意义。
现在小易想要知道，他进行了不超过k次操作之后，不稳定值最小是多少
*/


// 未做出 需要注意的地方太多 线下写了很久也只通过50% 这样的题拿一部分就开溜


#include<iostream>
using namespace std;
#include <queue>

int main() {
    int n, k;
    int A[100];
    queue<int> record;
    while (cin >> n >> k) {
        for (int i = 0; i < n; i++)
            cin >> A[i];
        int s, m;
        int* s_s = new int[k];
        for (m = 0; m < k; m++) {
            int max_index = 0, min_index = 0;
            bool multi_max = false, multi_min = false;
            int min = 999999, max = -1;
            for (int j = 0; j < n; j++) {
                if (A[j] > max) { // 只记录第一个 输出要求
                    max = A[j];
                    max_index = j;
                    continue;
                }
                if (A[j] == max)
                    multi_max = true;
            }
            for (int j = 0; j < n; j++) {
                if (A[j] < min) {
                    min = A[j];
                    min_index = j;
                    continue;
                }
                if (A[j] == min)
                    multi_min = true;
            }

            s = max - min;
            if (!multi_max && !multi_min)
                s -= 2;
            else if (multi_max && multi_min)
                s = s;
            else if (multi_max || multi_min)
                s -= 1;

            s_s[m] = s;

            A[max_index]--;
            A[min_index]++;
            record.push(max_index);
            record.push(min_index);
        }
        
        bool flag = false;
        for (int i = k-2; i >= 0; i--) {
            if (s_s[i] == s_s[k-1]) {
                m--;
                flag = true;
            }
        }
        if (flag)
            m--;
      
        cout << s << ' ' << m << endl;
        for (int i = 0; i < m; i++) {
            cout << record.front() + 1 << ' ';
            record.pop();
            cout << record.front() + 1 << endl;
            record.pop();
        }
        while (!record.empty())
            record.pop();
    }
    return 0;
}
