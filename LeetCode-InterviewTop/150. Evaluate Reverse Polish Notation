class Solution {
public:
    int toInt(string s) {
        bool flag = false;
        int i = 0, val = 0;
        if (s[0] == '-') {
            flag = true;
            i = 1;
        }
        for (; i < s.size(); i++) {
            val *= 10;
            val += s[i] - '0';
        }
        if (flag)
            val = -val;
        return val;            
    }
    
    int evalRPN(vector<string>& tokens) { // 后缀表达式求值
        stack<int> s;
        int an = 0, tmp1 = 0, tmp2 = 0;
        for (int i = 0; i < tokens.size(); i++) {
            if (tokens[i][0] == '+' || (tokens[i][0] == '-' && tokens[i].size() == 1) || 
                tokens[i][0] == '*' || tokens[i][0] == '/') {
                tmp1 = s.top();
                s.pop();
                tmp2 = s.top();
                s.pop();
                if (tokens[i][0] == '+')
                    s.push(tmp2 + tmp1);
                else if (tokens[i][0] == '-')
                    s.push(tmp2 - tmp1);
                else if (tokens[i][0] == '*')
                    s.push(tmp2 * tmp1);
                else
                    s.push(tmp2 / tmp1);
            }
            else
                s.push(toInt(tokens[i]));
        }
        return s.top();
    }
};