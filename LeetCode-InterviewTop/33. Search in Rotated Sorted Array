class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        int mid;
        while (left <= right) {
            mid = left + (right - left) / 2; // (left + right) / 2 会导致溢出
            if (nums[mid] == target)
                return mid;
            /* 常规二分查找
            else if (nums[mid] > target) 
                right = mid - 1; // 一定要有常数步进 不然死循环
            else if (nums[mid] < target)
                left = mid + 1;
            */
            
            // 旋转数组的话分析规律 任意中点mid小于right，则mid至right为升序 mid大于right，则left至mid为升序
            if (nums[mid] < nums[right]) { // 在右半段数组中判断
                if (nums[mid] < target && target <= nums[right]) // mid等于的情况前面判断过 
                    left = mid + 1;
                else // 两种情况丢到左边 target > nums[right] 和 target < nums[mid]
                    right = mid - 1;            
            }
            else {
                if (nums[mid] > target && target >= nums[left])
                    right = mid - 1;
                else 
                    left = mid + 1;
            }
        }
        return -1;
    }
};