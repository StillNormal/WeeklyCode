class Solution {
public:    
    int lengthOfLongestSubstring(string s) {
        int n = s.size();
        if (n == 0 || n == 1)
            return n;

        // memset 不同平台字节数不同要sizeof 指针用法又不一样 初始0和1也不一样
        map<int, int> last_index; // 防特殊字符
        int* dp = new int[n]; // 以i结尾的最长不重复
        dp[0] = 1;
        last_index[s[0]-'a'] = 0;
        
        for (int i = 1; i < n; i++) {
            int index = s[i] - 'a';
            if (last_index.find(index) != last_index.end())
                dp[i] = min(dp[i-1] + 1, i - last_index[index]); // 转移方程还有些难
            else
                dp[i] = dp[i-1] + 1;
            last_index[index] = i;
        }

        int max = -1;
        for (int i = 0; i < n; i++)
            if (dp[i] > max)
                max = dp[i];
        
        return max;
    }
};