class Solution {
public:
    
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq;
        for (int i = 0; i < nums.size(); i++) {
            pq.push(-1 * nums[i]);
            if (pq.size() > k)
                pq.pop();
        }
        
        return -1 * pq.top();
    }
    
    
    /*
    int e = 0;
    void qsort(vector<int>& nums, int p, int q, int k) {
        if (p > q)
            return;
        
        int key = nums[q];
        int i, j;
        for (i = p-1, j = p; j <= q; j++) {
            if (nums[j] > key) {
                i++;
                swap(nums[i], nums[j]);
            }
        }
        swap(nums[i+1], nums[q]);
        
        if (k == i+1) { // 改进快排 注意不要在递归终止处返回
            e = nums[k];
            return;
        }
        if (k >= p && k <= i)
            qsort(nums, p, i, k);
        if (k >= i+2 && k <= q)
            qsort(nums, i+2, q, k);
    }
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size();
        qsort(nums, 0, n-1, k-1);
        return e;
    }
    */
    /*
    int findKthLargest(vector<int>& nums, int k) { // 冒泡 O(nk)
        int n = nums.size();
        int cnt = 0;
        for (int i = n-1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (nums[i] < nums[j])
                    swap(nums[i], nums[j]);
            }
            cnt++;
            if (cnt == k)
                break;
        }
        
        return nums[n-k];
    }
    */
};