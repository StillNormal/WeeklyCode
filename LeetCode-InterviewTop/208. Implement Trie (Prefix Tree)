class Trie {
public:
    struct Node { // 字典树 简单实现
        bool isLeaf;
        Node* next[26];
        Node() {
            isLeaf = false;
            for (int i = 0; i < 26; i++)
                next[i] = NULL;
        }
    };
    
    /** Initialize your data structure here. */
    Node* root;
    Trie() {
        root = new Node();
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* p = root;
        for (int i = 0; i < word.size(); i++) {
            int index = word[i] - 'a';
            if (p->next[index] == NULL) {
                Node* n = new Node();
                p->next[index] = n;
            }
            p = p->next[index];
            if (i == word.size() - 1)
                p->isLeaf = true;
        }
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* p = root;
        for (int i = 0; i < word.size(); i++) {
            int index = word[i] - 'a';
            if (p->next[index] == NULL)
                return false;
            p = p->next[index];
            if (i == word.size() - 1 && p->isLeaf != true) // 注意顺序
                return false;
        }
        return true;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* p = root;
        for (int i = 0; i < prefix.size(); i++) {
            int index = prefix[i] - 'a';
            if (p->next[index] == NULL)
                return false;
            p = p->next[index];
        }
        return true;        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * bool param_2 = obj.search(word);
 * bool param_3 = obj.startsWith(prefix);
 */