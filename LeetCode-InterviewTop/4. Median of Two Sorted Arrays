class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        // 两个指针从头分别指的方法在O（k），达不到log级别
        int m = nums1.size();
        int n = nums2.size();
        int total = m + n;
        if (total % 2 == 1)
            return find_K_th(nums1.begin(), nums2.begin(), m, n, total / 2 + 1); // 转换求第k个数 下标为k/2+1
        else // 偶数的话是均值
            return (find_K_th(nums1.begin(), nums2.begin(), m, n, total / 2) + 
                    find_K_th(nums1.begin(), nums2.begin(), m, n, total / 2 + 1)) / 2.0; // 不然是int结果
    }
    
    // 两数组中找第K大的数 k从1开始 因此转化指针跳过要在vector中去一部分数
    int find_K_th(vector<int>::iterator nums1, vector<int>::iterator nums2, int m, int n, int k) {
        // 保证nums2更大
        if (m > n) 
            return find_K_th(nums2, nums1, n, m, k);
        
        // 基本情况
        if (m == 0)
            return nums2[k - 1];
        if (k == 1) 
            return min(nums1[0], nums2[0]);
        
        // 每次将k分成两半，比较两数组中第k/2数，小的那个所在数组中前k/2个数都被抛弃，因为其后面的数还有可能比另一个数组的第k/2数大或小，k为偶自不必谈，k为奇则取到(k-1)/2，程序上实现等与k/2-1，相对不会误删
        int ia = min(k / 2, m);
        int ib = k - ia;
        if (nums1[ia - 1] == nums2[ib - 1]) // -1是数组下标从0开始
            return nums1[ia - 1];
        else if (nums1[ia - 1] < nums2[ib - 1]) {            
            return find_K_th(nums1 + ia, nums2, m - ia, n, k - ia); // 一个数组不动，另一个数组去掉前k/2个数 
        }
        else {
            return find_K_th(nums1, nums2 + ib, m, n - ib, k - ib);
        }
    }
};
