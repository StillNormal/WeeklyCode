class Solution {
public:
    
    bool check(vector<int>& m1, vector<int>& m2) { // 判断不是求全排
        for (int i = 0; i < 26; i++)
            if (m1[i] != m2[i])
                return false;
    
        return true;
    }
    
    bool checkInclusion(string s1, string s2) { // 滑窗
        int i = 0, j = 0;
        vector<int> m1(26, 0);
        vector<int> m2(26, 0);
        for (int i = 0; i < s1.size(); i++)
            m1[s1[i]-'a']++;
        int len1 = s1.size();
        
        m2[s2[0]-'a']++;
        while (j < s2.size()) {
            int len2 = j - i + 1;
            if (len2 == len1) {
                if (check(m1, m2))
                    return true;
                else {
                    j++;
                    if (j < s2.size())
                        m2[s2[j]-'a']++;
                }
            }
            else if (len2 < len1) {
                j++;
                if (j < s2.size())
                    m2[s2[j]-'a']++;
            }
            else {
                m2[s2[i]-'a']--;
                i++;
            }
        }
        
        return false;
    }
};