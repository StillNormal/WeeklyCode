#include <algorithm>

class Solution {
public:   
    string addBinary(string a, string b) {
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());
        
        int alen = a.size();
        int blen = b.size();
        int abmax = alen > blen ? alen : blen; // 不是计算短的而是长的
        string s;
        int carry = 0;
        for (int i = 0; i < abmax; i++) {
            int sum;
            if (i >= alen)
                sum = b[i] - '0' + carry;
            else if (i >= blen)
                sum = a[i] - '0' + carry;
            else
                sum = a[i] - '0' + b[i] - '0' + carry;
            
            if (sum >= 2) {
                carry = 1;
                s.insert(s.begin(), sum % 2 + '0'); // 在前面插入避免s再翻转一次 同时解决了s的大小预定义问题
            }
            else {
                carry = 0;
                s.insert(s.begin(), sum + '0');
            }
        }
        if (carry == 1)
            s.insert(s.begin(), '1');            
        
        return s;
    }
};