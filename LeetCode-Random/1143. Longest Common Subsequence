class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        int dp[m][n];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                dp[i][j] = 0;
        
        bool flag = false;
        for (int i = 0; i < m; i++) {
            if (text1[i] == text2[0])
                flag = true;
            dp[i][0] = flag;
        }
        flag = false;
        for (int j = 0; j < n; j++) {
            if (text1[0] == text2[j])
                flag = true;
            dp[0][j] = flag;
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (text1[i] == text2[j]) // 若i-1 则初始化全0 看dp数组表达
                    dp[i][j] = dp[i-1][j-1] + 1;
                else
                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
            }
        }
        
        return dp[m-1][n-1];
    }
};