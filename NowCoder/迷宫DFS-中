#include <iostream>
#include <vector>
using namespace std;

/*
小青蛙有一天不小心落入了一个地下迷宫,小青蛙希望用自己仅剩的体力值P跳出这个地下迷宫。为
了让问题简单,假设这是一个n*m的格子迷宫,迷宫每个位置为0或者1,0代表这个位置有障碍物,小
青蛙达到不了这个位置;1代表小青蛙可以达到的位置。小青蛙初始在(0,0)位置,地下迷宫的出口
在(0,m-1)(保证这两个位置都是1,并且保证一定有起点到终点可达的路径),小青蛙在迷宫中水平
移动一个单位距离需要消耗1点体力值,向上爬一个单位距离需要消耗3个单位的体力值,向下移动不消
耗体力值,当小青蛙的体力值等于0的时候还没有到达出口,小青蛙将无法逃离迷宫。现在需要你帮助小
青蛙计算出能否用仅剩的体力值跳出迷宫(即达到(0,m-1)位置)
*/

int max_p_left = -1;
vector<int> max_path_x;
vector<int> max_path_y;

void DFS(int matrix[][10], int n, int m, int p, int i, int j, // 注意二维数组参数 浅拷贝
         vector<int> path_x, vector<int> path_y) { // 关键 深拷贝 不同vector
    
    if (matrix[i][j] == 0) 
        return;
    if (i < 0 || j < 0 || i == n || j == m)   
        return;
    if (p < max_p_left)
        return;
    
    matrix[i][j] = 0; // 关键的关键 已走路封死
    path_x.push_back(i);
    path_y.push_back(j);
    if (i == 0 && j == m-1) {
        if (p > max_p_left) {
            max_p_left = p;
            max_path_x = path_x;
            max_path_y = path_y;
        }
        matrix[i][j] = 1;
        return;
    }
    
    DFS(matrix, n, m, p, i+1, j, path_x, path_y);
    DFS(matrix, n, m, p-3, i-1, j, path_x, path_y);
    DFS(matrix, n, m, p-1, i, j+1, path_x, path_y);
    DFS(matrix, n, m, p-1, i, j-1, path_x, path_y);
    matrix[i][j] = 1; // 关键的关键 恢复人为封住的路
}

int main() {
    int n, m, p;
    cin >> n >> m >> p;
    int matrix[10][10];
    bool visited[10][10];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < m; j++)
            cin >> matrix[i][j];
    
    vector<int> path_x;
    vector<int> path_y;
    DFS(matrix, n, m, p, 0, 0, path_x, path_y);

    if (max_p_left < 0) {
        cout << "Can not escape!";
        return 0;
    }

    int i;
    for (i = 0; i < max_path_x.size()-1; i++)
        cout << "[" << max_path_x[i] << "," << max_path_y[i] << "],";
    cout << "[" << max_path_x[i] << "," << max_path_y[i] << "]" << endl;
    
    return 0;
}