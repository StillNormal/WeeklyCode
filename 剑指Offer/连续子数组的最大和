/*
HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话
了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候
,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会
弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个
为止)。给一个数组，返回它的最大连续子序列的和，你会不会被他忽悠住？(子向量的长
度至少是1)
*/

class Solution {
public:
    int FindGreatestSumOfSubArray(vector<int> array) {
        int a[1000]; // a[i]记录到i为止最大连续序列的和 错接不上 正确是记录以i为结尾
        a[0] = array[0];
  
        // 关键之二 状态转移方程
        for (int i = 1; i < array.size(); i++) {
            if (a[i-1] >= 0)
                a[i] = array[i] + a[i-1];
            else
                a[i] = array[i];
        }
        
        int max = -1; // 并不是一步到位 动态规划后a[i]直接是最后大难
        for (int i = 0; i < array.size(); i++)
            if (a[i] > max)
                max = a[i];
        
        return max;
    }
};