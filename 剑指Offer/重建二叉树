/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序
遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,
5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
*/

class Solution {
public:
    TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> vin) {
        if (pre.size() == 0)
            return NULL;
        
        int root = pre[0];
        TreeNode* node = new TreeNode(root);
        
        // 关键是理解根左右和左根右 以此划出四个子树        
        vector<int> vin_left_tree;
        vector<int> vin_right_tree; 
        bool find_root = false;
        for (int i = 0; i < vin.size(); i++) {
            if (vin[i] == root) {
                find_root = true;
                continue;
            }       
            if (!find_root)
                vin_left_tree.push_back(vin[i]);
            else
                vin_right_tree.push_back(vin[i]);
        }
        vector<int> pre_left_tree;
        vector<int> pre_right_tree;
        for (int i = 1; i < pre.size(); i++) {
            if (i < 1 + vin_left_tree.size())
                pre_left_tree.push_back(pre[i]);
            else
                pre_right_tree.push_back(pre[i]);
        }
        
        // vector作形参传递子树结点 不需要考虑下标边界
        node->left = reConstructBinaryTree(pre_left_tree, vin_left_tree); 
        node->right = reConstructBinaryTree(pre_right_tree, vin_right_tree);
        
        return node;
    }
};