class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n = gas.size();
        int total = 0;
        vector<int> diff; // 转换成最大子序列问题
        for (int i = 0; i < n; i++) {
            diff.push_back(gas[i] - cost[i]);
            total += gas[i] - cost[i];
        }
        
        vector<int> maxSeq; // 动态规划 maxSeq[i]代表到i时的序列和最大值
        vector<int> index; // 最大序列和的起始下标
        maxSeq.push_back(diff[0]);
        index.push_back(0);
        for (int i = 1; i < n; i++) {
            if (maxSeq[i - 1] >= 0) {
                index.push_back(index[i - 1]);
                maxSeq.push_back(maxSeq[i - 1] + diff[i]);
            }
            else {
                index.push_back(i);
                maxSeq.push_back(diff[i]);
            }
        }
        
                
        if (total < 0)
            return -1;
        else
            return index[n - 1];
    }
};
